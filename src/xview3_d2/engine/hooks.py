import os
import shutil
from pathlib import Path

from detectron2.engine import HookBase
from detectron2.utils.events import EventWriter, TensorboardXWriter

SAGEMAKER_TRAINING = "SM_HOSTS" in os.environ

def copy_tensorboard(writer):
    """Copy tensorboard output to checkpoints folder in SageMaker"""
    
    tensorboard_dir = os.getenv('D2_OUTPUT_DIR', Path(writer._writer.log_dir))
    glob_tboard_fnames = list(Path(tensorboard_dir).rglob("*events*"))
    
    if len(glob_tboard_fnames):
        tensorboard_fname = glob_tboard_fnames[0]
        
        # Get the experiment name from the folder path (assume autogenerated.)
        exp_name = os.getenv('D2_EXP_NAME', "_".join(tensorboard_fname.parts[-3:-1]))
        output_dir = Path("/opt/ml/checkpoints/") / exp_name
        output_dir.mkdir(exist_ok=True, parents=True)

        shutil.copyfile(
            str(tensorboard_fname), str(output_dir / f"{tensorboard_fname.name}")
        )


class PeriodicWriter(HookBase):
    """
    Write events to EventStorage (by calling ``writer.write()``) periodically.

    It is executed every ``period`` iterations and after the last iteration.
    Note that ``period`` does not affect how data is smoothed by each writer.

    Modified to copy tensorboard events data to /opt/ml/checkpoint directory during SageMaker training.
    """

    def __init__(self, writers, period=20):
        """
        Args:
            writers (list[EventWriter]): a list of EventWriter objects
            period (int):
        """
        self._writers = writers
        for w in writers:
            assert isinstance(w, EventWriter), w

        self._period = period

    def after_step(self):
        if (self.trainer.iter + 1) % self._period == 0 or (
            self.trainer.iter == self.trainer.max_iter - 1
        ):
            for writer in self._writers:
                writer.write()
                if isinstance(writer, TensorboardXWriter) and SAGEMAKER_TRAINING:
                    copy_tensorboard(writer)

    def after_train(self):
        for writer in self._writers:
            # If any new data is found (e.g. produced by other after_train),
            # write them before closing
            writer.write()
            writer.close()

            if isinstance(writer, TensorboardXWriter) and SAGEMAKER_TRAINING:
                copy_tensorboard(writer)
